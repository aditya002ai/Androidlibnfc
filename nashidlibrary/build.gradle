plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.android'


}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdk 32

    defaultConfig {
        minSdk 21
        targetSdk 32

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.71"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation files('libs/jj2000_imageutil/jj2000_imageutil.jar')
//    implementation project(path: ':engine')
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation 'com.google.android.material:material:1.2.0-alpha02'
    implementation 'org.jmrtd:jmrtd:0.7.18'
    implementation 'com.rmtheis:tess-two:6.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.github.mhshams:jnbis:2.0.2'
    implementation 'net.sf.scuba:scuba-sc-android:0.0.20'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'com.squareup.okio:okio:1.15.0'
    implementation 'com.google.firebase:firebase-analytics:17.4.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'
    implementation 'com.caverock:androidsvg-aar:1.4'
    implementation 'com.google.firebase:firebase-firestore:21.3.1'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
    implementation 'com.google.android.gms:play-services-vision:20.0.0'
    implementation 'me.aflak.libraries:ezcam:2.3.3'
    implementation 'com.karumi:dexter:5.0.0'
    implementation 'com.google.firebase:firebase-crashlytics-buildtools:2.9.2'
    implementation 'com.madgag.spongycastle:core:1.54.0.0'
    implementation 'com.madgag.spongycastle:pkix:1.54.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
    kapt "com.android.databinding:compiler:"
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
//afterEvaluate {
//    publishing {
//        publications {
//            bar(MavenPublication) {
//                groupId 'aditya002ai'
//                artifactId 'omanidlibrary'
//                version '0.1'
//            }
//        }
//    }
//}

//afterEvaluate {
//    publishing {
//        publications {
//            allVariants(MavenPublication) {
//                groupId 'com.aditya002ai.library'
//                artifactId 'omanidlibrary'
//                version '0.1'
//            }
//        }
//    }
//}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    android.libraryVariants.each { variant ->
        publishing.publications.create(variant.name, MavenPublication){
            from components.findByName(variant.name)

//            artifact androidJavadocsJar
//            artifact androidSourcesJar
//            com.aditya002ai.library:omanidlibrary:0.1

            groupId 'com.aditya002ai.library'
            artifactId 'omanidlibrary'
            version '0.1'

        }

    }

}